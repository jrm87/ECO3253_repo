---
title: "Getting Started with Data (in R)"
subtitle: ""
format: 
  beamer: 
      aspectratio: 169
      navigation: horizontal
      colortheme: rose
      urlcolor: blue
author: Jonathan Moreno-Medina
institute: ECO3253, UTSA
date: "Fall 2022"
---

# Why R again?

## Why are we learning R? I wanted to learn about social issues...

```{r setup_getting_started, include=FALSE, purl=FALSE}
library(pacman)
p_load(
  broom, tidyverse,
  ggplot2, ggthemes, ggforce, viridis, extrafont, gridExtra,
  dplyr, here, magrittr
)
chap <- 2
lc <- 0
rq <- 0
# **`r paste0("(LC", chap, ".", (lc <- lc + 1), ")")`**
# **`r paste0("(RQ", chap, ".", (rq <- rq + 1), ")")`**

knitr::opts_chunk$set(
  tidy = FALSE, 
  out.width = '\\textwidth', 
  fig.height = 4,
  fig.align='center',
  warning = FALSE
  )

options(scipen = 99, digits = 3)

# Set random number generator see value for replicable pseudorandomness. Why 76?
# https://www.youtube.com/watch?v=xjJ7FheCkCU
set.seed(76)
#alternative way of loading data:
#githubURL <- ("https://raw.githubusercontent.com/jrm87/ECO3253_repo/master/rds/trials.rds")
#download.file(githubURL,"trials.rds", method="curl")
#data <- readRDS("trials.rds")
```

This class *is* about social issues in economics. But what are those social issues? 

* Economic mobility
* Effects of education
* Pollution and climate change
* and so on...

How can we know if going to school increases wages? Or if economic mobility is low or high? 

We need to *analyze* data! We can do that analysis by hand... but that would be very time consuming. Or we can use a super calculator with amazing capabilities to explore data, maps, etc: enter **R** and **R Studio**. 

## Ok, but why R?

- **R** is free and open source!
- **R** has a vibrant online community!
- **R** is very flexible and powerful — adaptable to nearly any task ( _e.g._, correlations, econometrics, spatial data analysis, machine learning, web scraping, data cleaning, website building, teaching.)
- Employers like **R** over alternatives

## Added benefits of learning R

```{r, statistical languages, echo = F, fig.height = 6, fig.width = 9}
# The popularity data
pop_df <- data.frame(
  lang = c("SQL", "Python", "R", "SAS", "Matlab", "SPSS", "Stata"),
  n_jobs = c(107130, 66976, 48772, 25644, 11464, 3717, 1624),
  free = c(T, T, T, F, F, F, F)
)
pop_df %<>% mutate(lang = lang %>% factor(ordered = T))
# Plot it
red_pink <- "#e64173"
ggplot(data = pop_df, aes(x = lang, y = n_jobs, fill = free)) +
geom_col() +
geom_hline(yintercept = 0) +
aes(x = reorder(lang, -n_jobs), fill = reorder(free, -free)) +
xlab("Statistical language") +
scale_y_continuous(label = scales::comma) +
ylab("Number of jobs") +
ggtitle(
  "Comparing statistical languages",
  subtitle = "Number of job postings on Indeed.com, 2019/01/06"
) +
scale_fill_manual(
  "Free?",
  labels = c("True", "False"),
  values = c(red_pink, "darkslategray")
) +
theme_pander(base_size = 17) +
theme(legend.position = "bottom")
```

# Getting Started with Data in R {#getting-started}

## Basic questions

Before we can start exploring data in R, there are some key concepts to understand first:

1. What are R and RStudio?
1. How do I code in R?
1. What are R packages?

We will cover those 3 points today, and you will start exploring your first dataset based on what we covered!

## What are R and RStudio? {#r-rstudio}

We will use R via RStudio. They are not the same!

* R is like a car's engine.
* RStudio is like a car's dashboard.

R: Engine            |  RStudio: Dashboard 
:-------------------------:|:-------------------------:
![](../../images/engine.jpg){ height=1.7in }  |  ![](../../images/dashboard.jpg){ height=1.7in }



## What are R and RStudio?

- R: programming language that runs computations 
- RStudio: *integrated development environment (IDE)* - interface that add many convenient features and tools.

So just as having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudio's interface makes using R much easier as well. 



## R and RStudio: In your computer or in the cloud?

To use R and RStudio, you can:

- install it in your computer (see the book) or ...
- run it on someone else's computer (the cloud!). We will do that, so you don't have to worry about installations. 

# Let's open R!

## RStudio in the cloud

Let's jump in! You should have received a link for you to access RStudio in the cloud. The Department of Economics is paying for us to use this service for this class. Remember that all the **code is running on someone's computer**. In this case, it is running on a computer owned by the folks at RStudio. 

INCLUDE FIGURE OF RStudio Cloud

## Starting a project

Include Figure


## Using R via RStudio

:::: {.columns}

::: {.column width="60%"}
![](../../images/rstudio.png)
:::

::: {.column width="40%"}
When open RStudio, you should see this (<-)

3 panes (panels dividing the screen): 

1. The *Console pane*
1. *Files pane*
1. *Environment pane*

We will soon learn what they are for.
:::

::::

# Simple coding in R {#code}

## How do I code in R? {#code}

"OK. Now how do I use R?" Unlike other statistical software programs like Excel, STATA, or SAS that provide [point and click](https://en.wikipedia.org/wiki/Point_and_click) interfaces, R is an [interpreted language](https://en.wikipedia.org/wiki/Interpreted_language)

Meaning you have to enter in R commands written in R code. In other words, you have to code/program in R.

That sounds scary if you have not programmed, but turns out **programming in R is fairly simple**



## Basic programming concepts and terminology - 1 {#programming-concepts}

You'll "learn by doing." Whenever you see the following, it means `computer_code`, not normal text. 

How will you learn? **Do the HOMEWORKS with time**... I cannot emphasize this enough! 

* Basics:
    + *Console*: Where you enter in commands. \index{console}
    + *Running code*: The act of telling R to perform an action by giving it commands in the console.
    + *Objects*: Where values are saved in R. In order to do useful and interesting things in R, we will want to *assign* a name to an object. For example we could do the following assignments: `x <- 44 - 20` and `three <- 3`. This would allow us to run `x + three` which would return `27`.
    + *Data types*: Integers, doubles/numerics, logicals, and characters. 



## Basic programming concepts and terminology - 2

* *Vectors*: A series of values. These are created using the `c()` function, where `c()` stands for "combine" or "concatenate." For example: `c(6, 11, 13, 31, 90, 92)`.
* *Factors*: *Categorical data* are represented in R as factors.
* *Data frames*: Data frames are like rectangular spreadsheets: they are representations of datasets in R where the rows correspond to *observations* and the columns correspond to *variables* that describe the observations. We will use this a lot!



## Basic programming concepts and terminology - 3

* *Conditionals*: 
    + Testing for equality in R using `==` (and not `=` which is typically used for assignment). Ex: `2 + 1 == 3` compares `2 + 1` to `3` and is correct R code, while `2 + 1 = 3` will return an error.
    + Boolean algebra: `TRUE/FALSE` statements and mathematical operators such as `<` (less than), `<=` (less than or equal), and `!=` (not equal to). 
    + Logical operators: `&` representing "and" as well as `|` representing "or." Ex: `(2 + 1 == 3) & (2 + 1 == 4)` returns `FALSE` since both clauses are not `TRUE` (only the first clause is `TRUE`). On the other hand, `(2 + 1 == 3) | (2 + 1 == 4)` returns `TRUE` since at least one of the two clauses is `TRUE`. 
* *Functions*, also called *commands*: Functions perform tasks in R. They take in inputs called *arguments* and return outputs. You can either manually specify a function's arguments or use the function's *default values*. 

## In Class Exercise

:::: {.columns}

::: {.column width="50%"}
```{r, echo=TRUE, eval=FALSE}
2*3
2*pi
log(10)
exp(2)
sqrt(25)
3==3
3==4
3<=4
3!=4
```
:::

::: {.column width="50%"}

```{r, echo=TRUE, eval=FALSE}
x <- c(1,3,2,5)# this is called a 'vector'
x #what do you see?
x <- c(1,6,2)
x #now what do you see?
y <- c(1,4,3) # USE ARROW!
length(x)
length(y)
x+y
#write this
write this again
```
:::

::::

## Errors, warnings, and messages

What is scare for most new R and RStudio users? *errors*, *warnings*, and *messages*! 

R reports errors, warnings, and messages in a glaring red font, which makes it seem like it is scolding you. However, seeing red text in the console is not always bad.

R will show red text in the console pane in three different situations:



## Errors

* **Errors**: When \textcolor{red}{red text} is a legitimate error, it will be prefaced with "Error in…" and try to explain what went wrong. 

* Generally when there's an error, the code will not run. 
    * For example, we'll see in Subsection \@ref(package-use) if you see `Error in ggplot(...) : could not find function "ggplot"`: it means that the `ggplot()` function is not accessible because the package that contains the function (`ggplot2`) was not loaded with `library(ggplot2)`. Thus you cannot use the `ggplot()` function without the `ggplot2` package being loaded first.



## Warnings

* **Warnings**: When \textcolor{red}{red text} is a warning, it will be prefaced with "Warning:" and R will try to explain why there's a warning. 

* Generally your code will still work, but with some caveats. For example, we will see later that if you create a scatterplot based on a dataset where one of the values is missing, you will see this warning: `Warning: Removed 1 rows containing missing values (geom_point)`. R will still produce the scatterplot with all the remaining values, but it is warning you that one of the points isn't there.



## Messages

* **Messages**: When \textcolor{red}{red text} doesn't start with either "Error" or "Warning", it's *just a friendly message*. 

* You'll see these messages when you load *R packages* in the upcoming section or when you read data saved in spreadsheet files with the `read_csv()` function. These are helpful diagnostic messages and they don't stop your code from working. Additionally, you'll see these messages when you install packages too using `install.packages()`.



## What to do if you see \textcolor{red}{red text}?

*Don't panic!*. It doesn't necessarily mean anything is wrong. Rather:

* If the text starts with "Error", figure out what's causing it. <span style="color:red">Think of errors as a red traffic light: something is wrong!</span>
* If the text starts with "Warning", figure out if it's something to worry about. For instance, if you get a warning about missing values in a scatterplot and you know there are missing values, you're fine. If that's surprising, look at your data and see what's missing. <span style="color:gold">Think of warnings as a yellow traffic light: everything is working fine, but watch out/pay attention.</span>
* Otherwise the text is just a message. Read it, wave back at R, and thank it for talking to you. <span style="color:green">Think of messages as a green traffic light: everything is working fine.</span>



## Tips on learning to code

Learning to code/program is like learning a foreign language: can be daunting and frustrating at first. But as learning a foreign language, effort + not afraid to make mistakes = anybody can learn. 

Tips:

* **Remember that computers are not actually that smart**: You have to tell a computer everything it needs to do. Instructions should not have mistakes nor be ambiguous.
* **Take the "copy, paste, and tweak" approach**: Especially when learning your first programming language, it is often much easier to taking existing code that you know works and modify it to suit your ends, rather than trying to write new code from scratch. 
* **The best way to learn to code is by doing**: Do the homeworks with time! This are opportunities for you to try and get familiar with coding. 
* **Practice is key**:  Just as the only method to improving your foreign language skills is through practice, practice, and practice.

# R Packages

## What are R packages? {#packages}

Usual confusion with many new R users: packages. They give extra functionality to R (extra functions, data, and documentation). They are written by a world-wide community of R users and can be downloaded for free from the internet. 

For example, among the many packages we will in the course are the `ggplot2` package for data visualization. We will see more on how to use `ggplot2` and `dplyr` package (helpful to edit and modify data - or wrangling).

R packages = apps for a phone:

R: A new phone           |  R Packages: Apps you can download
:-------------------------:|:-------------------------:
![](../../images/iphone.jpg){ height=1.0in } |  ![](../../images/apps.jpg){ height=1.0in }



## Packages as Apps

How do you open an app like Instagram on your phone? 

1. *Install the app*: New phone does not have Instagram app -> you need to download it. You do this **once** and you're set. You might do this again in the future any time there is an update to the app.
1. *Open the app*: After you've installed Instagram, you need to open the app.

Once Instagram is open on your phone, you can then proceed to share your photo. Almost the same for an R package. You need to:

1. *Install the package*: This is like installing an app on your phone. Most packages are not installed by default when you install R and RStudio. If you want to use a package for the first time, you need to install it first. Once you've installed a package, unlikely you need to install again.
1. *"Load" the package*: "Loading" a package is like opening an app on your phone. Packages are not "loaded" by default when you start RStudio on your computer; you need to "load" each package you want to use every time you start RStudio.

Let's install `ggplot2` package for data visualization.



## Package installation {#package-installation}

There are two ways to install an R package. For example, to install the `ggplot2` package:

:::: {.columns}

::: {.column width="60%"}
![](../../images/install_packages_easy_way.png)
:::

::: {.column width="40%"}
- **Easy way**: In the Files pane of RStudio:
    a) Click on the "Packages" tab
    a) Click on "Install"
    a) Type the name of the package under "Packages (separate multiple with space or comma):" In this case, type `ggplot2`
    a) Click "Install"  
:::

::::

## Package installation - 2 

- **Slightly harder way**: A more common way to install a package is by typing

```{r, echo=TRUE, eval=FALSE}
install.packages("ggplot2")
```
in the Console pane of RStudio and hitting enter. Note you must include the quotation marks.


## Excercise - Install Packages

Install packages `dplyr`,  and `knitr` packages. This will install the earlier mentioned `dplyr` package, and the `knitr` package for writing reports in R. 



## Package loading {#package-loading}

Recall: after installing a package, you need to "load" it (open it). We do this by using the `library()` command. For example, to load the `ggplot2` package, run the following code in the Console pane. What do we mean by "run the following code"? Either type or copy & paste the following code into the Console pane and then hit the enter key. 

```{r, echo=TRUE, eval=FALSE}
library(ggplot2)
```

After running above code, do you see blinking cursor returns next to the `>` "prompt" sign? YES: success! `ggplot2` package is now loaded and ready to use; NO: got a red "error message" that reads...

```
Error in library(ggplot2) : there is no package called ‘ggplot2’
```

... it means that you didn't successfully install it. In that case, go back to the previous subsection "Package installation" and install it. 



## Excercise - Load Packages

Load packages `dplyr`,  and `knitr` packages as well by repeating the above steps.



## Package use {#package-use}

One extremely common mistake new R users make when wanting to use particular packages is that they forget to "load" them first by using the `library()` command we just saw. Remember: *you have to load each package you want to use every time you start RStudio.* If you don't first "load" a package, but attempt to use one of its features, you'll see an error message similar to:

```
Error: could not find function
```

R is telling you that you are trying to use a function in a package that has not yet been "loaded." Almost all new users forget do this when starting out, and it is a little annoying to get used to. However, you'll remember with pratice.  

# Hands-on exercise!

## Explore your first dataset: economic mobility in the US {#mobilitydata}

Let's put everything we've learned so far into practice and start exploring some real data! These "spreadsheet"-type datasets are called _data frames_ in R; we will focus on working with data saved as data frames throughout this course.

Step 1: Load all the packages needed for this exercise (assuming you've already installed them). 


```{r message=FALSE}
library(dplyr)
library(tibble)
atlas <- readRDS(gzcon(url("https://raw.githubusercontent.com/jrm87/ECO3253_repo/master/data/atlas.rds")))
atlas<-tibble(atlas)
```


## Economic mobility data

The [Opportunity Atlas](https://www.opportunityatlas.org/) is a freely available interactive mapping tool that traces the roots of outcomes such as poverty and incarceration back to the neighborhoods in which children grew up. The `atlas` dataset we loaded has the underlying data to describe equality of opportunity across the `r scales::comma(nrow(atlas))` different neighborhoods in the United States. 

Let's unpack these data a bit more!

## `atlas` data frame

We will begin by exploring the `atlas` data frame we just loaded to get an idea of its structure. Run the following code in your console (either by typing it or cutting & pasting it): it loads the `atlas` dataset into your Console. Note depending on the size of your monitor, the output may vary slightly. 

```{r load_atlas, echo=TRUE}
atlas
```

Let's unpack this output:

* `A tibble: 73,278 x 62`: A `tibble` is a kind of data frame used in R. This particular data frame has
    + `73,278` rows (one for each neighborhood)
    + `62` columns corresponding to 62 variables describing each observation (e.g. neighborhood in this case)
* `tract county state cz czname hhinc_mean2000 mean_commutetime2000 ...` are different columns, in other words variables, of this data frame.
* We then have the first 10 rows of observations corresponding to 10 neighborhoods.
* `... with 73,268 more rows, and 52 more variables:` indicating to us that 73,268 more rows of data and 52 more variables could not fit in this screen.

Unfortunately, this output does not allow us to explore the data very well. Let's look at different tools to explore data frames.

## Exploring data frames {#exploredataframes}

Among the many ways of getting a feel for the data contained in a data frame such as `atlas`, we present three functions that take as their "argument", in other words their input, the data frame in question. We also include a fourth method for exploring one particular column of a data frame:

1. Using the `View()` function built for use in RStudio. We will use this the most.
1. Using the `glimpse()` function, which is included in the `dplyr` package.
1. Using the `$` operator to view a single variable in a data frame.

## View() - Part 1

**1. `View()`**:

Run `View(atlas)` in your Console in RStudio, either by typing it or cutting & pasting it into the Console pane, and explore this data frame in the resulting pop-up viewer. You should get into the habit of always `View`ing any data frames that come your way.  Note the capital "V" in `View`.  R is case-sensitive so you'll receive an error is you run `view(atlas)` instead of `View(atlas)`.

```{block lc2-2, type='learncheck'}
**_Learning check_**
```

**`r paste0("(LC", chap, ".", (lc <- lc + 1), ")")`** What does any *ONE* row in this `atlas` dataset refer to?

- A. Data on an neighborhood 
- B. Data on a state
- C. Data on an person
- D. Data on multiple neighborhood

```{block, type='learncheck'}
```

## View() - Part 2

By running `View(atlas)`, we see the different *variables* listed in the columns and we see that there are different types of variables.  Some of the variables like `poor_share2010`, `hhinc_mean2000`, and `share_hisp2010` are what we will call *quantitative* variables. These variables are numerical in nature. Other variables, like `tract` are *categorical*: they are just names (even if they have numbers). For example `tract` represents a Tract FIPS Code, that is, a 6-digit code assigned by the census folks to each neighborhood in 2010.

Note that if you look in the leftmost column of the `View(atlas)` output, you will see a column of numbers.  These are the row numbers of the dataset.  If you glance across a row with the same number, say row 5, you can get an idea of what each row corresponds to.

## glimpse()

**2. `glimpse()`**:

The second way to explore a data frame is using the `glimpse()` function included in the `dplyr` package. Thus, you can only use the `glimpse()` function after you've loaded the `dplyr` package. This function provides us with an alternative method for exploring a data frame:

```{r, echo=TRUE}
glimpse(atlas)
```

## glimpse() - Part 2

We see that `glimpse()` will give you the first few entries of each variable in a row after the variable.  In addition, the *data type* of the variable is given immediately after each variable's name inside `< >`.  Here, `int` and `dbl` refer to "integer" and "double", which are computer coding terminology for quantitative/numerical variables.  In contrast, `chr` refers to "character", which is computer terminology for text data. Text data, such as the `czname` (the name of the metro area), are categorical variables. 

## `$` operator 

**3. `$` operator**

Lastly, the `$` operator allows us to explore a single variable within a data frame. For example, run the following in your console

```{r, echo=TRUE, eval=FALSE}
atlas$tract
```

We used the `$` operator to extract only the `tract` variable and return it as a vector of length 73,278. We will only be occasionally exploring data frames using this operator, instead favoring the `View()` and `glimpse()` functions.

## Conclusion

We've given you what we feel are the most essential concepts to know before you can start exploring data in R. There is much more to explore in R but this is a great place to get started!


### Additional resources

If you want to dive more and feel you could benefit from a more detailed introduction, check this short book: [Getting used to R, RStudio, and R Markdown](https://rbasics.netlify.com/) short book. 

It has screencast recordings that you can follow along and pause as you learn. Furthermore, there is an introduction to R Markdown, a tool used for reproducible research in R.

<center>
![](../../images/gettting-used-to-R.png){ height=2.5in }
</center>

<!-- ### What's to come? -->

<!-- As we stated earlier however, the best way to learn R is to learn by doing. We now start the "data science" portion of the book in Chapter \@ref(viz) with what we feel is the most important tool in a data scientist's toolbox: data visualization. We will continue to explore the data included in the `nycflights13` package through data visualization. We'll see that data visualization is a powerful tool to add to our toolbox for data exploring that provides additional insight to what the `View()` and `glimpse()` functions can provide.  -->

<!-- ```{r echo=FALSE, fig.cap="ModernDive flowchart", out.width='110%', fig.align='center'} -->
<!-- knitr::include_graphics("images/flowcharts/flowchart/flowchart.004.png") -->
<!-- ``` -->


